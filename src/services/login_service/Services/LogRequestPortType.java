
package services.login_service.Services;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "LogRequestPortType", targetNamespace = "http://ChristianRosalesTest.com")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
@XmlSeeAlso({
    ObjectFactory.class
})
public class LogRequestPortType {
    Connection con;
    boolean exists;
    public LogRequestPortType(){
        try {
            String host = "jdbc:derby://localhost:1527/reservationDB";
            String username = "u_name";
            String password = "password1";
            con = DriverManager.getConnection(host, username, password);
        } catch (SQLException ex) {
            Logger.getLogger(LogRequestPortType.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * 
     * @param loginRequest
     * @return
     *     returns Services.LoginResponse
     */
    @WebMethod(operationName = "Login", action = "http://ChristianRosalesTest.com")
    @WebResult(name = "LoginResponse", targetNamespace = "http://ChristianRosalesTest.com", partName = "LoginRespond")
    public LoginResponse login(
        @WebParam(name = "LoginComplete", targetNamespace = "http://ChristianRosalesTest.com", partName = "LoginRequest")
        LoginComplete loginRequest)throws LogException
    {
        exists = false;
        LoginResponse response = new LoginResponse();
        String username;
        String actualPassword;
        username = loginRequest.getUsername();
        actualPassword = getPassword(username);
        if(username.isEmpty())
            throw new LogException("Empty Username isn't allowed.", "");
        else if (!username.matches("[a-zA-Z0-9]+\\.?"))
            throw new LogException("Username can only contain Number and Letters.", username);
        else if (!loginRequest.getPassword().matches("[a-zA-Z0-9]+\\.?"))
            throw new LogException("Password can only contain Number and Letters.", loginRequest.getPassword());
        if(exists)
            if(loginRequest.getPassword().equals(actualPassword))
            response.setCompleted("Login Successful!");
            else
                response.setCompleted("Invalid Password");
        else
            response.setCompleted("That username doesn't exist.");
        return response;
    }
    
    private String getPassword(String givenUsername){
        String password = "";
        try {
            String SQL;
            ResultSet rs;
            Statement stmt = con.createStatement();
            SQL = "SELECT * FROM LOGIN WHERE USERNAME = '" + givenUsername + "'";
            rs = stmt.executeQuery(SQL);
            while(rs.next()){
                exists = true;
                password = rs.getString("PASSWORD");
            }
        } catch (SQLException ex) {
            Logger.getLogger(LogRequestPortType.class.getName()).log(Level.SEVERE, null, ex);
        }
        return password;
    }

}
